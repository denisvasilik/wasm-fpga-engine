RUN_WASM_FPGA_ENGINE:
BEGIN_SUB
    MESSAGE 2 "RUN_WASM_FPGA_ENGINE"

    EQU_VAR WB_ADDRESS $ENGINEBLK_ADR_ControlReg
    WRITE_FPGA 0 $WB_ADDRESS $ENGINEBLK_VAL_DoRun
    VERIFY_FPGA 0 $WB_ADDRESS WB_VALUE $ENGINEBLK_VAL_DoRun $ENGINEBLK_BUS_MASK_Run

    WAIT_NS 10

    EQU_VAR WB_ADDRESS $ENGINEBLK_ADR_ControlReg
    WRITE_FPGA 0 $WB_ADDRESS $ENGINEBLK_VAL_DoNotRun
    VERIFY_FPGA 0 $WB_ADDRESS WB_VALUE $ENGINEBLK_VAL_DoNotRun $ENGINEBLK_BUS_MASK_Run

    RETURN_CALL
END_SUB


DEBUG_WASM_FPGA_ENGINE:
BEGIN_SUB
    MESSAGE 2 "DEBUG_WASM_FPGA_ENGINE"

    EQU_VAR WB_ADDRESS $ENGINEDEBUGBLK_ADR_Breakpoint0Reg
    WRITE_FPGA 1 $WB_ADDRESS $WASM_BREAKPOINT0
    VERIFY_FPGA 1 $WB_ADDRESS WB_VALUE $WASM_BREAKPOINT0 $ENGINEDEBUGBLK_BUS_MASK_Breakpoint0

    EQU_VAR WB_ADDRESS $ENGINEDEBUGBLK_ADR_ControlReg
    EQU_VAR WB_VALUE $ENGINEDEBUGBLK_VAL_DoDebug
    OR_VAR WB_VALUE $ENGINEDEBUGBLK_VAL_DoStopDebugging
    WRITE_FPGA 1 $WB_ADDRESS $WB_VALUE
    VERIFY_FPGA 1 $WB_ADDRESS WB_RETVAL $WB_VALUE #xFFFFFFFF

    RETURN_CALL
END_SUB


RESET_WASM_FPGA_ENGINE:
BEGIN_SUB
    MESSAGE 2 "RESET_WASM_FPGA_ENGINE"

    SET_SIG $SIG_RST 1
    WAIT_NS 100
    SET_SIG $SIG_RST 0

    CALL $PREPARE_STORE

    RETURN_CALL
END_SUB


PREPARE_STORE:
BEGIN_SUB
    -- Prepare store to provide a start section entry
    WRITE_RAM $WASM_STORE #x0 #x0 -- Module Instance UID
    WRITE_RAM $WASM_STORE #x1 #x8 -- Section UID
    WRITE_RAM $WASM_STORE #x2 #x0 -- Idx
    WRITE_RAM $WASM_STORE #x3 #x13 -- Start Function Address

    -- Prepare store to provide a start function address
    WRITE_RAM $WASM_STORE #x4 #x0 -- Module Instance UID
    WRITE_RAM $WASM_STORE #x5 #xA -- Code UID
    WRITE_RAM $WASM_STORE #x6 #x0 -- Idx
    WRITE_RAM $WASM_STORE #x7 #x18 -- Start Function Address

    RETURN_CALL
END_SUB


WAIT_UNTIL_ENGINE_IS_IDLE:
BEGIN_SUB
    MESSAGE 2 "WAIT_UNTIL_ENGINE_IS_IDLE"

    LOOP 100
        WAIT_NS 1000
        READ_FPGA 1 $ENGINEBLK_ADR_StatusReg SIG_RETVAL
        AND_VAR SIG_RETVAL $ENGINEBLK_BUS_MASK_Busy
        MESSAGE 3 "SIG_RETVAL: $SIG_RETVAL"
        IF $SIG_RETVAL = #x0
            EXIT_LOOP
            RETURN_CALL
        END_IF
        EQU_VAR TMP_VAL $SIG_RETVAL
    END_LOOP
    ERRORPRINT "ERROR: Engine is not idle in reasonable time"
        ABORT
        RETURN_CALL
END_SUB