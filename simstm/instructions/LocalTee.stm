-- WAT:
--
-- (module
--     (func $my_func (param $a i32) (param $b i32)
--         get_local $a
--         get_local $b
--         i32.sub
--         set_local $a)

--     (func $main
--         i32.const 3
--         i32.const 4
--         call $my_func)

--     (start $main)
-- )
--
TEST_LOCAL_TEE:
BEGIN_SUB
    MESSAGE 0 "TEST_LOCAL_TEE"

    CALL $RESET_WASM_FPGA_ENGINE

    -- Prepare store to provide a start section entry
    WRITE_RAM $WASM_STORE #x0 #x0 -- Module Instance UID
    WRITE_RAM $WASM_STORE #x1 #x8 -- Section UID of Start Section
    WRITE_RAM $WASM_STORE #x2 #x0 -- Idx
    WRITE_RAM $WASM_STORE #x3 #x19 -- Start Function Address

    -- Prepare store to provide a start function address
    WRITE_RAM $WASM_STORE #x4 #x0 -- Module Instance UID
    WRITE_RAM $WASM_STORE #x5 #xA -- Section UID of Code Section
    WRITE_RAM $WASM_STORE #x6 #x01 -- Idx
    WRITE_RAM $WASM_STORE #x7 #x28 -- Start Function Address

    -- Prepare store to provide a start function address
    WRITE_RAM $WASM_STORE #x8 #x0 -- Module Instance UID
    WRITE_RAM $WASM_STORE #x9 #xA -- Section UID of Code Section
    WRITE_RAM $WASM_STORE #xA #x00 -- Idx
    WRITE_RAM $WASM_STORE #xB #x1E -- Start Function Address

    -- Prepare store to provide function section address in order to figure out
    -- the functions type index
    WRITE_RAM $WASM_STORE #xC #x0 -- Module Instance UID
    WRITE_RAM $WASM_STORE #xD #x3 -- Section UID of Function Section
    WRITE_RAM $WASM_STORE #xE #x0 -- Idx
    WRITE_RAM $WASM_STORE #xF #x16 -- Type Idx Address

    -- Prepare store to provide type section address in order to check number of
    -- parameters
    WRITE_RAM $WASM_STORE #x10 #x0 -- Module Instance UID
    WRITE_RAM $WASM_STORE #x11 #x1 -- Section UID of Type Section
    WRITE_RAM $WASM_STORE #x12 #x0 -- Idx
    WRITE_RAM $WASM_STORE #x13 #x0C -- Function Type Address

    WRITE_RAM $WASM_MODULE #x000000 #x00
    WRITE_RAM $WASM_MODULE #x000001 #x61
    WRITE_RAM $WASM_MODULE #x000002 #x73
    WRITE_RAM $WASM_MODULE #x000003 #x6D
    WRITE_RAM $WASM_MODULE #x000004 #x01
    WRITE_RAM $WASM_MODULE #x000005 #x00
    WRITE_RAM $WASM_MODULE #x000006 #x00
    WRITE_RAM $WASM_MODULE #x000007 #x00
    WRITE_RAM $WASM_MODULE #x000008 #x01
    WRITE_RAM $WASM_MODULE #x000009 #x09
    WRITE_RAM $WASM_MODULE #x00000A #x02
    WRITE_RAM $WASM_MODULE #x00000B #x60
    WRITE_RAM $WASM_MODULE #x00000C #x02
    WRITE_RAM $WASM_MODULE #x00000D #x7F
    WRITE_RAM $WASM_MODULE #x00000E #x7F
    WRITE_RAM $WASM_MODULE #x00000F #x00
    WRITE_RAM $WASM_MODULE #x000010 #x60
    WRITE_RAM $WASM_MODULE #x000011 #x00
    WRITE_RAM $WASM_MODULE #x000012 #x00
    WRITE_RAM $WASM_MODULE #x000013 #x03
    WRITE_RAM $WASM_MODULE #x000014 #x03
    WRITE_RAM $WASM_MODULE #x000015 #x02
    WRITE_RAM $WASM_MODULE #x000016 #x00
    WRITE_RAM $WASM_MODULE #x000017 #x01
    WRITE_RAM $WASM_MODULE #x000018 #x08
    WRITE_RAM $WASM_MODULE #x000019 #x01
    WRITE_RAM $WASM_MODULE #x00001A #x01
    WRITE_RAM $WASM_MODULE #x00001B #x0A
    WRITE_RAM $WASM_MODULE #x00001C #x14
    WRITE_RAM $WASM_MODULE #x00001D #x02
    WRITE_RAM $WASM_MODULE #x00001E #x09
    WRITE_RAM $WASM_MODULE #x00001F #x00
    WRITE_RAM $WASM_MODULE #x000020 #x20 -- local.get
    WRITE_RAM $WASM_MODULE #x000021 #x00 -- local index
    WRITE_RAM $WASM_MODULE #x000022 #x20 -- local.get
    WRITE_RAM $WASM_MODULE #x000023 #x01 -- local index
    WRITE_RAM $WASM_MODULE #x000024 #x6B -- i32.sub
    WRITE_RAM $WASM_MODULE #x000025 #x21 -- local.set
    WRITE_RAM $WASM_MODULE #x000026 #x00 -- local index
    WRITE_RAM $WASM_MODULE #x000027 #x0B
    WRITE_RAM $WASM_MODULE #x000028 #x08
    WRITE_RAM $WASM_MODULE #x000029 #x00
    WRITE_RAM $WASM_MODULE #x00002A #x41
    WRITE_RAM $WASM_MODULE #x00002B #x03
    WRITE_RAM $WASM_MODULE #x00002C #x41
    WRITE_RAM $WASM_MODULE #x00002D #x04
    WRITE_RAM $WASM_MODULE #x00002E #x10
    WRITE_RAM $WASM_MODULE #x00002F #x00
    WRITE_RAM $WASM_MODULE #x000030 #x0B

    EQU_VAR WASM_BREAKPOINT0 #x000027
    CALL $DEBUG_WASM_FPGA_ENGINE_AND_STOP

    CALL $WAIT_UNTIL_ENGINE_IS_IDLE

    -- First activation frame created during instantiation
    VERIFY_RAM $WASM_STACK #x00 WB_VALUE #x00000000 #xFFFFFFFF
    VERIFY_RAM $WASM_STACK #x01 WB_VALUE #x00000000 #xFFFFFFFF
    VERIFY_RAM $WASM_STACK #x02 WB_VALUE #x00000005 #xFFFFFFFF
    VERIFY_RAM $WASM_STACK #x03 WB_VALUE #x00000000 #xFFFFFFFF
    VERIFY_RAM $WASM_STACK #x04 WB_VALUE #x00000000 #xFFFFFFFF
    VERIFY_RAM $WASM_STACK #x05 WB_VALUE #x00000005 #xFFFFFFFF

    -- Parameters
    -- Local Index 1
    VERIFY_RAM $WASM_STACK #x06 WB_VALUE #x00000003 #xFFFFFFFF
    VERIFY_RAM $WASM_STACK #x07 WB_VALUE #x00000000 #xFFFFFFFF
    VERIFY_RAM $WASM_STACK #x08 WB_VALUE #x00000000 #xFFFFFFFF
    -- Local Index 0: Check value of local variable with local
    --                index 0 after local.set.
    VERIFY_RAM $WASM_STACK #x09 WB_VALUE #x00000001 #xFFFFFFFF
    VERIFY_RAM $WASM_STACK #x0A WB_VALUE #x00000000 #xFFFFFFFF
    VERIFY_RAM $WASM_STACK #x0B WB_VALUE $STACKBLK_VAL_i32 #xFFFFFFFF

    -- Second activation frame created by call instruction
    VERIFY_RAM $WASM_STACK #x0C WB_VALUE #x00000000 #xFFFFFFFF -- ModuleInstanceUid
    VERIFY_RAM $WASM_STACK #x0D WB_VALUE #x00000030 #xFFFFFFFF -- ReturnAddress
    VERIFY_RAM $WASM_STACK #x0E WB_VALUE #x00000005 #xFFFFFFFF
    VERIFY_RAM $WASM_STACK #x0F WB_VALUE #x00000002 #xFFFFFFFF -- MaxLocals
    VERIFY_RAM $WASM_STACK #x10 WB_VALUE #x00000000 #xFFFFFFFF -- MaxResults
    VERIFY_RAM $WASM_STACK #x11 WB_VALUE #x00000005 #xFFFFFFFF

    RETURN_CALL
END_SUB





